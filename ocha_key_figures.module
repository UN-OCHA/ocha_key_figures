<?php

/**
 * @file
 * Themes and preprocessors for the paragraphs page title module.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\ocha_key_figures\Controller\BaseKeyFiguresController;
use Drupal\paragraphs\Entity\Paragraph;

/**
 * Implements hook_theme().
 */
function ocha_key_figures_theme($existing, $type, $theme, $path) {
  return [
    'ocha_key_figures_key_figures' => [
      'template' => 'ocha-key-figures-key-figures',
      'variables' => [
        'country_iso' => NULL,
        'country_name' => NULL,
        'data' => [],
        'total' => [],
        'view_all' => NULL,
        'view_all_info' => [],
        'jsonld' => NULL,
      ],
    ],
    'form_element_label__checkbox' => [
      'template' => 'form-element-label--checkbox',
      'render element' => 'element',
    ],
    'checkboxes__layout_paragraphs_component_form__field_figures' => [
      'template' => 'checkboxes--layout-paragraphs-component-form--field-figures',
      'render element' => 'element',
    ],
    'ocha_key_figures_figure_list' => [
      'variables' => [
        'attributes' => NULL,
        'figures' => NULL,
      ],
    ],
    'ocha_key_figures_figure' => [
      'variables' => [
        'attributes' => NULL,
        'label_attributes' => NULL,
        'value_attributes' => NULL,
        'unit_attributes' => NULL,
        'label' => NULL,
        'value' => NULL,
        'unit' => NULL,
        'country' => NULL,
        'year' => NULL,
      ],
    ],

  ];
}

/**
 * Implements hook_preprocess_paragraph__type().
 */
function ocha_key_figures_preprocess_paragraph__reliefweb_key_figures(&$variables) {
  /** @var \Drupal\ocha_key_figures\Controller\RWCrisisKeyFiguresController */
  $controller = \Drupal::service('ocha_key_figures.rw_key_figures_controller');

  ocha_key_figures_keyfigures($variables, $controller);
}

/**
 * Implements hook_preprocess_paragraph__type().
 */
function ocha_key_figures_preprocess_paragraph__fts_key_figures(&$variables) {
  /** @var \Drupal\ocha_key_figures\Controller\FtsKeyFiguresController */
  $controller = \Drupal::service('ocha_key_figures.fts_figures_controller');

  ocha_key_figures_keyfigures($variables, $controller);
}

/**
 * Implements hook_preprocess_paragraph__type().
 */
function ocha_key_figures_preprocess_paragraph__oct_key_figures(&$variables) {
  /** @var \Drupal\ocha_key_figures\Controller\OctKeyFiguresController */
  $controller = \Drupal::service('ocha_key_figures.oct_figures_controller');

  ocha_key_figures_keyfigures($variables, $controller);
}

/**
 * Implements hook_preprocess_paragraph__type().
 */
function ocha_key_figures_preprocess_paragraph__idps_key_figures(&$variables) {
  /** @var \Drupal\ocha_key_figures\Controller\IdpsKeyFiguresController */
  $controller = \Drupal::service('ocha_key_figures.idps_figures_controller');

  ocha_key_figures_keyfigures($variables, $controller);
}

/**
 * Implements hook_preprocess_paragraph__type().
 */
function ocha_key_figures_preprocess_paragraph__cbpf_key_figures(&$variables) {
  /** @var \Drupal\ocha_key_figures\Controller\CbpfKeyFiguresController */
  $controller = \Drupal::service('ocha_key_figures.cbpf_key_figures_controller');

  ocha_key_figures_keyfigures($variables, $controller);
}

/**
 * Implements hook_preprocess_paragraph__type().
 */
function ocha_key_figures_preprocess_paragraph__inform_key_figures(&$variables) {
  /** @var \Drupal\ocha_key_figures\Controller\InformKeyFiguresController */
  $controller = \Drupal::service('ocha_key_figures.inform_key_figures_controller');

  ocha_key_figures_keyfigures($variables, $controller);
}

/**
 * Implements hook_preprocess_paragraph__type().
 */
function ocha_key_figures_preprocess_paragraph__cerf_key_figures(&$variables) {
  /** @var \Drupal\ocha_key_figures\Controller\CerfKeyFiguresController */
  $controller = \Drupal::service('ocha_key_figures.cerf_key_figures_controller');

  ocha_key_figures_keyfigures($variables, $controller);
}

/**
 * Implements hook_preprocess_paragraph__type().
 */
function ocha_key_figures_preprocess_paragraph__featured_numbers(&$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  $view_all = FALSE;

  // Allow push subscription.
  $view_mode = $variables['view_mode'];
  if ($view_mode !== 'preview') {
    $variables['attributes']['data-push-allowed'] = TRUE;
    $variables['attributes']['data-push-id'] = $paragraph->id();
  }

  // Make sure numbers are set.
  if (!$paragraph->hasField('field_numbers') || $paragraph->field_numbers->isEmpty()) {
    return;
  }

  $key_figures = [];
  /** @var \Drupal\paragraphs\Entity\Paragraph $number */
  foreach ($paragraph->field_numbers->referencedEntities() as $number) {
    // Make sure Country is set.
    if (!$number->hasField('field_country') || $number->field_country->isEmpty()) {
      return;
    }

    /** @var \Drupal\ocha_key_figures\Controller\BaseKeyFiguresController $controller */
    $controller = ocha_key_figures_load_keyfigure_controller_by_entity($number);

    if (!$controller) {
      continue;
    }

    // Do we need sparklines.
    $sparklines = FALSE;
    if ($number->hasField('field_show_sparklines') && $number->field_show_sparklines->value) {
      $sparklines = TRUE;
    }

    // Get the data.
    $data = ocha_key_figures_get_keyfigure_data($number, $controller, $sparklines);
    if (empty($data)) {
      continue;
    }

    $key_figures = array_merge($key_figures, $data);
  }

  if (!empty($key_figures)) {
    // Add year to name.
    foreach ($key_figures as &$key_figure) {
      $key_figure['name'] = $key_figure['country'] . ' - ' . $key_figure['name'];
    }

    $variables['content']['key_figures'] = [
      '#theme' => 'ocha_key_figures_key_figures',
      '#data' => $key_figures,
      '#view_all' => $view_all,
      '#weight' => 99,
      '#cache' => [
        'max-age' => ocha_key_figures_get_max_age(),
      ],
    ];
  }
}

/**
 * Helper function to render Numbers paragraphs.
 */
function ocha_key_figures_get_keyfigure_data(Paragraph $paragraph, BaseKeyFiguresController $controller, $sparklines = FALSE) {
  // Make sure Country is set.
  if (!$paragraph->hasField('field_country') || $paragraph->field_country->isEmpty()) {
    return;
  }

  // Fetch country from user input.
  $iso3 = $paragraph->field_country->value;

  $year = FALSE;
  if (!$paragraph->hasField('field_year') || !$paragraph->field_year->isEmpty()) {
    $year = $paragraph->field_year->value;
    if ($year === 'current') {
      $year = date('Y');
    }
  }

  // Selected figures.
  $selected_figures = [];
  if ($paragraph->hasField('field_figures') && !$paragraph->field_figures->isEmpty()) {
    foreach ($paragraph->field_figures->getValue() as $figure) {
      $selected_figures[$figure['value']] = $figure['value'];
    }
  }

  try {
    // Get the data.
    $results = $controller->getKeyFigures($iso3, $year);

    // Filter figures.
    if (!empty($selected_figures)) {
      $results = array_intersect_key($results, $selected_figures);
    }

    // Build figures.
    $data = $controller->buildKeyFigures($results, $sparklines);
    if (empty($data)) {
      return FALSE;
    }

    // Set dollar-sign prefix if data is financial.
    foreach ($data as &$fig) {
      if (isset($fig['valueType']) && $fig['valueType'] == 'amount') {
        $fig['prefix'] = $fig['unit'] ?? '$';
      }
    }

    // Set suffix if needed.
    foreach ($data as &$fig) {
      if (isset($fig['valueType']) && $fig['valueType'] == 'percentage') {
        $fig['suffix'] = $fig['unit'] ?? '%';
      }
    }

    // Hide individual sparklines.
    if ($sparklines) {
      $with_sparkline = [];
      if ($paragraph->hasField('field_active_sparklines') && !$paragraph->field_active_sparklines->isEmpty()) {
        foreach ($paragraph->field_active_sparklines->getValue() as $figure) {
          $with_sparkline[$figure['value']] = $figure['value'];
        }
      }

      if (!empty($with_sparkline)) {
        foreach ($data as &$figure) {
          if (!in_array($figure['name'], $with_sparkline)) {
            unset($figure['trend']);
            unset($figure['sparkline']);
          }
        }
      }
    }

    // Use a custom sort order?
    if ($paragraph->hasField('field_sorted_sparklines') && !$paragraph->field_sorted_sparklines->isEmpty()) {
      $separator = '|-|';
      $order = $paragraph->field_sorted_sparklines->value;
      $order = explode($separator, $order);
      $order = array_flip($order);
      $order = array_intersect_key($order, $data);
      $data = array_merge($order, $data);
    }

    return $data;
  }
  catch (\Exception $exception) {
    return FALSE;
  }

  return FALSE;
}

/**
 * Helper function to render Numbers paragraphs.
 */
function ocha_key_figures_keyfigures(&$variables, BaseKeyFiguresController $controller) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  $view_all = $variables['view_all'] ?? FALSE;
  $view_all_info = $variables['view_all_info'] ?? NULL;

  // Allow push subscription.
  $view_mode = $variables['view_mode'];
  if ($view_mode !== 'preview') {
    $variables['attributes']['data-push-allowed'] = TRUE;
    $variables['attributes']['data-push-id'] = $paragraph->id();
  }

  // Do we need sparklines.
  $sparklines = FALSE;
  if ($paragraph->hasField('field_show_sparklines') && $paragraph->field_show_sparklines->value) {
    $sparklines = TRUE;
  }

  // Get the data.
  $data = ocha_key_figures_get_keyfigure_data($paragraph, $controller, $sparklines);

  if (!$data or empty($data)) {
    $variables['content']['key_figures'] = [
      '#type' => 'markup',
      '#markup' => t('Key figure data is currently not available.'),
      '#prefix' => '<div class="response-error response-error-api response-error-fts">',
      '#suffix' => '</div>',
    ];

    return;
  }

  // Fetch country from user input.
  $iso3 = $paragraph->field_country->value;

  $year = FALSE;
  if (!$paragraph->hasField('field_year') || !$paragraph->field_year->isEmpty()) {
    $year = $paragraph->field_year->value;
    if ($year === 'current') {
      $year = date('Y');
    }
  }

  $first = reset($data);
  $country = $first['country'];

  if ($view_all) {
    if (!isset($view_all_info['title'])) {
      $view_all_info['title'] = t('View all @country figures', [
        '@country' => $country,
      ]);
    }
  }

  // Add JSON-LD.
  $json_ld = [];

  if (\Drupal::config('ocha_key_figures.settings')->get('enable_json_ld')) {
    // Initialize data for JSON-LD.
    $json_data = [];
    foreach ($data as $row) {
      $json_data[$row['name']] = $row['value'];
    }

    $name = t('@title of @country', [
      '@title' => $paragraph->field_title->value ?? 'Key figures',
      '@country' => $country,
    ]);
    $description = t('Easily discoverable topline numbers for humanitarian crises in @country', [
      '@country' => $country,
    ]);

    $metadata = ocha_key_figures_metadata_by_type($paragraph->bundle());
    $metadata += [
      'name' => $name,
      'short_name' => $paragraph->field_title->value ?? 'Key figures',
      'spatialCoverage' => $country,
      'description' => $description,
      'temporalCoverage' => $year === FALSE ? '2000-01-01/..' : $year,
    ];

    $json_ld = ocha_key_figures_add_jsonld_data($metadata, $json_data);
  }

  $variables['content']['key_figures'] = [
    '#theme' => 'ocha_key_figures_key_figures',
    '#country_iso' => $iso3,
    '#country_name' => $country,
    '#data' => $data,
    '#jsonld' => $json_ld,
    '#view_all' => $view_all,
    '#view_all_info' => $view_all_info,
    '#weight' => 99,
    '#cache' => [
      'max-age' => ocha_key_figures_get_max_age(),
    ],
  ];
}

/**
 * Load controller by entity.
 */
function ocha_key_figures_load_keyfigure_controller_by_entity(ContentEntityInterface $entity) {
  if ($entity->bundle() == 'featured_number') {
    if ($entity->hasField('field_source') && !$entity->field_source->isEmpty()) {
      return ocha_key_figures_load_keyfigure_controller($entity->field_source->value);
    }

    return \Drupal::service('ocha_key_figures.rw_key_figures_controller');
  }

  return ocha_key_figures_load_keyfigure_controller($entity->bundle());
}

/**
 * Load controller by bundle.
 */
function ocha_key_figures_load_keyfigure_controller($bundle) {
  switch ($bundle) {
    case 'fts_key_figures':
      return \Drupal::service('ocha_key_figures.fts_figures_controller');

    case 'oct_key_figures':
      return \Drupal::service('ocha_key_figures.oct_figures_controller');

    case 'idps_key_figures':
      return \Drupal::service('ocha_key_figures.idps_figures_controller');

    case 'reliefweb_key_figures':
      return \Drupal::service('ocha_key_figures.rw_key_figures_controller');

    case 'cbpf_key_figures':
      return \Drupal::service('ocha_key_figures.cbpf_key_figures_controller');

    case 'inform_key_figures':
      return \Drupal::service('ocha_key_figures.inform_key_figures_controller');

    case 'cerf_key_figures':
      return \Drupal::service('ocha_key_figures.cerf_key_figures_controller');

  }

  return NULL;
}

/**
 * Allowed years.
 */
function ocha_key_figures_allowed_years(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  /** @var \Drupal\ocha_key_figures\Controller\BaseKeyFiguresController */
  $controller = ocha_key_figures_load_keyfigure_controller_by_entity($entity);

  if (!$controller) {
    return [];
  }

  $options = [
    'current' => t('Current year'),
  ];

  $years = $controller->getYears();
  $options += $years;

  return $options;
}

/**
 * Allowed countries.
 */
function ocha_key_figures_allowed_countries(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  /** @var \Drupal\ocha_key_figures\Controller\BaseKeyFiguresController */
  $controller = ocha_key_figures_load_keyfigure_controller_by_entity($entity);

  if (!$controller) {
    return [];
  }

  return $controller->getCountries();
}

/**
 * Allowed figures.
 */
function ocha_key_figures_allowed_figures(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  /** @var \Drupal\ocha_key_figures\Controller\BaseKeyFiguresController */
  $controller = ocha_key_figures_load_keyfigure_controller_by_entity($entity);

  if (!$controller) {
    return [];
  }

  // Fetch country from user input.
  $iso3 = $entity->field_country->value;
  if (empty($iso3)) {
    return [];
  }

  $year = FALSE;
  if (!$entity->field_year->isEmpty()) {
    $year = $entity->field_year->value;
    if ($year === 'current') {
      $year = date('Y');
    }
  }

  $figures = $controller->getKeyFigures($iso3, $year);
  $figures = array_keys($figures);

  return array_combine($figures, $figures);
}

/**
 * Metadata by type.
 */
function ocha_key_figures_metadata_by_type(string $bundle) {
  switch ($bundle) {
    case 'fts_key_figures':
      return [
        'publisher' => [
          '@type' => 'Organization',
          'sameAs' => 'https://ror.org/00aahzn97',
          'name' => 'OCHA Contribution Tracking (OCT)',
        ],
        'creator' => [
          '@type' => 'Organization',
          'sameAs' => 'https://ror.org/00aahzn97',
          'name' => 'OCHA Contribution Tracking (OCT)',
        ],
        'license' => [
          '@type' => 'CreativeWork',
          'name' => 'Creative Commons Attribution for Intergovernmental Organisations',
          'url' => 'https://data.humdata.org/faqs/licenses#auto-faq-_Data_Licenses_Content_-Creative_Commons_Attribution_for_Intergovernmental_Organisations__CC_BY_IGO_-a',
        ],
      ];

    case 'fts_key_figures':
      return [
        'publisher' => [
          '@type' => 'Organization',
          'sameAs' => 'https://ror.org/00aahzn97',
          'name' => 'OCHA Financial Tracking System (FTS)',
        ],
        'creator' => [
          '@type' => 'Organization',
          'sameAs' => 'https://ror.org/00aahzn97',
          'name' => 'OCHA Financial Tracking System (FTS)',
        ],
        'license' => [
          '@type' => 'CreativeWork',
          'name' => 'Creative Commons Attribution for Intergovernmental Organisations',
          'url' => 'https://data.humdata.org/faqs/licenses#auto-faq-_Data_Licenses_Content_-Creative_Commons_Attribution_for_Intergovernmental_Organisations__CC_BY_IGO_-a',
        ],
      ];

    case 'reliefweb_key_figures':
      return [
        'publisher' => [
          '@type' => 'Organization',
          'name' => 'ReliefWeb',
        ],
        'creator' => [
          '@type' => 'Organization',
          'name' => 'ReliefWeb',
        ],
        'license' => [
          '@type' => 'CreativeWork',
          'name' => 'Creative Commons Attribution for Intergovernmental Organisations',
          'url' => 'https://data.humdata.org/faqs/licenses#auto-faq-_Data_Licenses_Content_-Creative_Commons_Attribution_for_Intergovernmental_Organisations__CC_BY_IGO_-a',
        ],
      ];

    case 'inform_key_figures':
      return [
        'publisher' => [
          '@type' => 'Organization',
          'name' => 'ACAPS',
        ],
        'creator' => [
          '@type' => 'Organization',
          'name' => 'ACAPS',
        ],
        'license' => [
          '@type' => 'CreativeWork',
          'name' => 'Creative Commons Attribution International',
          'url' => 'https://data.humdata.org/faqs/licenses#auto-faq-_Data_Licenses_Content_-Creative_Commons_Attribution_International_CC_BY_-a',
        ],
      ];

    case 'cbpf_key_figures':
    case 'cerf_key_figures':
      return [
        'publisher' => [
          '@type' => 'Organization',
          'sameAs' => 'https://ror.org/00aahzn97',
          'name' => 'United Nations Office for the Coordination of Humanitarian Affairs',
        ],
        'creator' => [
          '@type' => 'Organization',
          'sameAs' => 'https://ror.org/00aahzn97',
          'name' => 'United Nations Office for the Coordination of Humanitarian Affairs',
        ],
        'license' => [
          '@type' => 'CreativeWork',
          'name' => 'Creative Commons Attribution International',
          'url' => 'https://data.humdata.org/faqs/licenses#auto-faq-_Data_Licenses_Content_-Creative_Commons_Attribution_International_CC_BY_-a',
        ],
      ];

  }

  // Default to OCHA.
  return [
    'publisher' => [
      '@type' => 'Organization',
      'sameAs' => 'https://ror.org/00aahzn97',
      'name' => 'United Nations Office for the Coordination of Humanitarian Affairs',
    ],
    'creator' => [
      '@type' => 'Organization',
      'sameAs' => 'https://ror.org/00aahzn97',
      'name' => 'United Nations Office for the Coordination of Humanitarian Affairs',
    ],
    'license' => [
      '@type' => 'CreativeWork',
      'name' => 'Creative Commons Attribution International',
      'url' => 'https://data.humdata.org/faqs/licenses#auto-faq-_Data_Licenses_Content_-Creative_Commons_Attribution_International_CC_BY_-a',
    ],
  ];
}

/**
 * Add json ld data.
 */
function ocha_key_figures_add_jsonld_data($metadata, $data) {
  $label_column = [];
  $value_column = [];
  $keywords = [];

  // Default keyword.
  $keywords[] = 'ReliefWeb > Numbers > ' . $metadata['spatialCoverage'] . ' > ' . $metadata['short_name'];

  foreach ($data as $label => $value) {
    $label_column[] = [
      'csvw:value' => $label,
      'csvw:primaryKey' => $label,
    ];

    $value_column[] = [
      'csvw:value' => $value,
      'csvw:primaryKey' => $value,
    ];

    $keywords[] = 'ReliefWeb > Numbers > ' . $metadata['spatialCoverage'] . ' > ' . $metadata['short_name'] . ' > ' . $label;
  }

  $json_ld = [
    '@context' => [
      'https://schema.org',
      [
        'csvw' => 'http://www.w3.org/ns/csvw#',
      ],
    ],
    '@type' => 'Dataset',
    'keywords' => $keywords,
    'isAccessibleForFree' => TRUE,
    'mainEntity' => [
      '@type' => 'csvw:Table',
      'csvw:tableSchema' => [
        'csvw:columns' => [
          [
            'csvw:name' => 'Label',
            'csvw:datatype' => 'string',
            'csvw:cells' => $label_column,
          ],
          [
            'csvw:name' => 'Value',
            'csvw:datatype' => 'number',
            'csvw:cells' => $value_column,
          ],
        ],
      ],
    ],
  ] + $metadata;

  return json_encode($json_ld);
}

/**
 * Callback.
 */
function ocha_key_figures_load_country_figures_callback(array $form, $form_state) {
  // Get paragraph fields.
  $paragraph = $form_state->getFormObject()->getParagraph();

  $source = $form_state->getValue('field_source');
  $country = $form_state->getValue('field_country');
  $year = $form_state->getValue('field_year');

  if (!empty($source)) {
    $source = $source[0]['value'];
  }

  if (!empty($year)) {
    $year = $year[0]['value'];
    if ($year === 'current') {
      $year = date('Y');
    }
  }

  if (!empty($country)) {
    $country = $country[0]['value'];
    $form['field_figures']['widget']['#options'] = ocha_key_figures_load_country_figures($paragraph, $country, $year, $source);
  }
  else {
    $form['field_figures']['widget']['#options'] = [];
  }

  return $form['field_figures'];
}

/**
 * Load figures for a country.
 */
function ocha_key_figures_load_country_figures(ContentEntityInterface $paragraph, $iso3, $year, $source = '') {
  /** @var \Drupal\ocha_key_figures\Controller\BaseKeyFiguresController */
  if ($source) {
    $controller = ocha_key_figures_load_keyfigure_controller($source);
  }
  else {
    $controller = ocha_key_figures_load_keyfigure_controller_by_entity($paragraph);
  }

  if (!$controller) {
    return [];
  }

  $figures = $controller->getKeyFigures($iso3, $year);
  $figures = array_keys($figures);
  sort($figures);

  return array_combine($figures, $figures);
}

/**
 * Callback.
 */
function ocha_key_figures_load_source_countries_callback(array $form, $form_state) {
  $source = $form_state->getValue('field_source');

  if (!empty($source)) {
    $source = $source[0]['value'];

    /** @var \Drupal\ocha_key_figures\Controller\BaseKeyFiguresController */
    $controller = ocha_key_figures_load_keyfigure_controller($source);

    $countries = $controller->getCountries();
    $form['field_country']['widget']['#options'] = $countries;
  }
  else {
    $form['field_country']['widget']['#options'] = [];
  }

  return $form['field_country'];
}

/**
 * Returns the maximum age (in seconds) for cached OCHA key figures.
 *
 * If the 'max_age' setting is defined in the OCHA key figures configuration,
 * this value is returned. Otherwise, a default value of 12 hours is used.
 *
 * @return int
 *   The maximum age for cached OCHA key figures.
 */
function ocha_key_figures_get_max_age() {
  if ($max_age = \Drupal::config('ocha_key_figures.settings')->get('max_age')) {
    return $max_age;
  }

  return 12 * 60 * 60;
}

/**
 * Move to webhook.
 */
function testCacheInvalidation() {
  $map = \Drupal::service('entity_field.manager')->getFieldMapByFieldType('key_figure');

  $records = [
    'fts_AFG_2023_funding_coverage' => [
      "label" => "Funding coverage",
      "value" => "0.23",
      "unit" => "%",
      "provider" => "fts",
      "id" => "fts_AFG_2023_funding_coverage",
      "country" => "afg",
      "year" => "2023",
    ]
  ];

  $type_ids = [];
  foreach ($records as $figure_id => $record) {
    foreach ($map as $type => $info) {
      $type_ids[$type] = [];
      foreach ($info as $name => $data) {
        $query = \Drupal::entityTypeManager()->getStorage($type)->getQuery();
        $query->condition($name . '.id', $figure_id);
        $result = $query->execute();
        $type_ids[$type] = array_merge($type_ids[$type], array_values($result));
      }
    }
  }

  foreach ($type_ids as $type => $ids) {
    $info = $map[$type];
    $entities = \Drupal::entityTypeManager()->getStorage($type)->loadMultiple($ids);
    foreach ($entities as $entity) {
      // Loop all fields of entity.
      foreach ($info as $name => $data) {
        if ($entity->hasField($name)) {
          $field_data = $entity->get($name)->getValue();
          foreach ($field_data as &$row) {
            if (array_key_exists($row['id'], $records)) {
              $row['value'] = $records[$row['id']]['value'];
              $row['unit'] = $records[$row['id']]['unit'] ?? '';
            }
          }
          $entity->get($name)->setValue($field_data);
        }
      }
      $entity->save();
      \Drupal\Core\Cache\Cache::invalidateTags($entity->getCacheTagsToInvalidate());
    }
  }

  return;
}
